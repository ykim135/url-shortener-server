!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Algorithm	src/main/scala/irobo/api/service/Algorithm.scala	/^class Algorithm() {$/;"	c
AlgorithmTest	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^object AlgorithmTest extends TestSuite with Matchers with MockitoSugar {$/;"	c
CORSHandler	src/main/scala/irobo/api/Server.scala	/^  val CORSHandler: Endpoint[Unit] = options(*) {$/;"	l
DnsResolvingCluster	src/main/scala/irobo/api/service/HttpInvoker.scala	/^class DnsResolvingCluster(host: String, port: Int, dnsTtlMillis: Long = 5 * 60 * 1000) extends Cluster[SocketAddress] with Logger {$/;"	c
DnsResolvingCluster	src/main/scala/irobo/api/service/HttpInvoker.scala	/^object DnsResolvingCluster extends Logger {$/;"	c
DnsTtl	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  val DnsTtl = 1000 * 60 * 5$/;"	l
EncodeFullUrl	src/main/scala/irobo/api/JsonEncoder.scala	/^  implicit val EncodeFullUrl: Encoder[FullUrl] = new Encoder[FullUrl] {$/;"	l
EncodeShortUrl	src/main/scala/irobo/api/JsonEncoder.scala	/^  implicit val EncodeShortUrl: Encoder[ShortUrl] = new Encoder[ShortUrl] {$/;"	l
Format	src/main/scala/irobo/api/Format.scala	/^object Format {$/;"	c
FullUrl	src/main/scala/irobo/api/model/ShortUrl.scala	/^case class FullUrl ($/;"	c
FutureConvert	src/main/scala/irobo/api/service/FutureConvert.scala	/^object FutureConvert {$/;"	c
GlobalParams	src/main/scala/irobo/api/model/GlobalParams.scala	/^case class GlobalParams ($/;"	c
GlobalParamsDao	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^class GlobalParamsDao(connection: Connection)(implicit ec: ExecutionContext) extends RowDao[GlobalParams] with Logger {$/;"	c
HostToResolve	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  class HostToResolve(val host: String, val port: Int, var current: Seq[SocketAddress], val outgoing: SpoolSource[Change[SocketAddress]])$/;"	c
HttpInvoker	src/main/scala/irobo/api/service/HttpInvoker.scala	/^class HttpInvoker private ($/;"	c
HttpInvoker	src/main/scala/irobo/api/service/HttpInvoker.scala	/^object HttpInvoker {$/;"	c
JsonDecoder	src/main/scala/irobo/api/JsonDecoder.scala	/^object JsonDecoder {$/;"	c
JsonEncoder	src/main/scala/irobo/api/JsonEncoder.scala	/^object JsonEncoder {$/;"	c
Logger	src/main/scala/irobo/api/Logger.scala	/^object Logger extends Logger {$/;"	c
Logger	src/main/scala/irobo/api/Logger.scala	/^trait Logger {$/;"	t
RichSFuture	src/main/scala/irobo/api/endpoint/Package.scala	/^  implicit class RichSFuture[A](val f: SFuture[A]) extends AnyVal {$/;"	c
RichSFuture	src/main/scala/irobo/api/service/FutureConvert.scala	/^  implicit class RichSFuture[A](val f: SFuture[A]) extends AnyVal {$/;"	c
RichTFuture	src/main/scala/irobo/api/endpoint/Package.scala	/^  implicit class RichTFuture[A](val f: TFuture[A]) extends AnyVal {$/;"	c
RichTFuture	src/main/scala/irobo/api/service/FutureConvert.scala	/^  implicit class RichTFuture[A](val f: TFuture[A]) extends AnyVal {$/;"	c
RowDao	src/main/scala/irobo/api/model/dao/RowDao.scala	/^trait RowDao[T] extends Logger {$/;"	t
Server	src/main/scala/irobo/api/Server.scala	/^object Server extends App with Logger {$/;"	c
ShortUrl	src/main/scala/irobo/api/model/ShortUrl.scala	/^case class ShortUrl ($/;"	c
TestDatabase	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^object TestDatabase {$/;"	c
Url	src/main/scala/irobo/api/model/Url.scala	/^case class Url ($/;"	c
UrlDao	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^class UrlDao(connection: Connection)(implicit ec: ExecutionContext) extends RowDao[Url] with Logger {$/;"	c
UrlDaoTest	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^object UrlDaoTest extends TestSuite with Matchers with MockitoSugar {$/;"	c
UrlEndPoint	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^class UrlEndPoint(urlService: UrlService)(implicit executionContext: ExecutionContext) {$/;"	c
UrlService	src/main/scala/irobo/api/service/UrlService.scala	/^class UrlService(urlDao: UrlDao)(implicit ec : ExecutionContext) extends Logger {$/;"	c
UrlServiceTest	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^object UrlServiceTest extends TestSuite with Matchers with MockitoSugar {$/;"	c
_pool	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  val _pool = connection$/;"	l
_pool	src/main/scala/irobo/api/model/dao/RowDao.scala	/^  def _pool : Connection$/;"	m
_pool	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  val _pool = connection$/;"	l
addResolver	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def addResolver(host: String, port: Int, outgoing: SpoolSource[Change[SocketAddress]]): Seq[SocketAddress] = {$/;"	m
added	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val added = updated.filter(!h.current.contains(_))$/;"	l
algorithm	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^      val algorithm = new Algorithm()$/;"	l
apply	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def apply($/;"	m
asScala	src/main/scala/irobo/api/endpoint/Package.scala	/^    def asScala(implicit e: ExecutionContext): SFuture[A] = {$/;"	m
asScala	src/main/scala/irobo/api/service/FutureConvert.scala	/^    def asScala(implicit e: ExecutionContext): SFuture[A] = {$/;"	m
asTwitter	src/main/scala/irobo/api/endpoint/Package.scala	/^    def asTwitter(implicit e: ExecutionContext): TFuture[A] = {$/;"	m
asTwitter	src/main/scala/irobo/api/service/FutureConvert.scala	/^    def asTwitter(implicit e: ExecutionContext): TFuture[A] = {$/;"	m
charset	src/main/scala/irobo/api/service/UrlService.scala	/^	private val charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"$/;"	l
client	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private val client   = ClientBuilder()$/;"	l
conf	src/main/scala/irobo/api/Server.scala	/^    val conf        = new Configuration($/;"	l
config	src/main/scala/irobo/api/Server.scala	/^  val config = ConfigFactory.load()$/;"	l
config	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val config            = ConfigFactory.load()$/;"	l
criticalLogger	src/main/scala/irobo/api/Logger.scala	/^  final val criticalLogger = org.slf4j.LoggerFactory.getLogger("critical")$/;"	l
current	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val current = DnsResolvingCluster.addResolver(host, port, outgoing)$/;"	l
current	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val current = resolve(host, port)$/;"	l
database	src/main/scala/irobo/api/Server.scala	/^    val database    = Option(mySqlConfig.getString("database"))$/;"	l
dayOfFirstDayOfMonth	src/main/scala/irobo/api/service/Algorithm.scala	/^		val dayOfFirstDayOfMonth = firstDayOfMonth.getDayOfWeek() \/\/ 2017-01-01 is Monday, Tuesday, etc.$/;"	l
dbConfig	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val dbConfig = new Configuration($/;"	l
dbHost	src/main/scala/irobo/api/Server.scala	/^    val dbHost      = mySqlConfig.getString("host")$/;"	l
dbPassword	src/main/scala/irobo/api/Server.scala	/^    val dbPassword  = Option(mySqlConfig.getString("password")).filterNot(_.isEmpty)$/;"	l
dbPort	src/main/scala/irobo/api/Server.scala	/^    val dbPort      = Option(mySqlConfig.getInt("port")).getOrElse(3306)$/;"	l
dbUserName	src/main/scala/irobo/api/Server.scala	/^    val dbUserName  = mySqlConfig.getString("username")$/;"	l
digits	src/main/scala/irobo/api/service/UrlService.scala	/^        val digits = loop(num) $/;"	l
digits	src/main/scala/irobo/api/service/UrlService.scala	/^    val digits = str.map { eachChar => charset.indexOf(eachChar) }.reverse$/;"	l
disableForeignKeyCheck	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def disableForeignKeyCheck() = pool.sendQuery("SET FOREIGN_KEY_CHECKS=0")$/;"	m
doc	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^			val doc: Json = parse(json.toString).getOrElse(Json.Null)$/;"	l
enableForeignKeyCheck	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def enableForeignKeyCheck()  = pool.sendQuery("SET FOREIGN_KEY_CHECKS=1")$/;"	m
f	src/main/scala/irobo/api/service/HttpInvoker.scala	/^      val f = client(request).asScala$/;"	l
f	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val f = client(request).asScala$/;"	l
factory	src/main/scala/irobo/api/Server.scala	/^    val factory    = new MySQLConnectionFactory(conf)$/;"	l
factory	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val factory = new MySQLConnectionFactory(dbConfig)$/;"	l
feb	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^        val feb = algorithm.getFirstMondayDate(2)$/;"	l
firstDayOfMonth	src/main/scala/irobo/api/service/Algorithm.scala	/^		val firstDayOfMonth = new LocalDate(2017, month, 1) \/\/ 2017-01-01$/;"	l
fullUrl	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^			val fullUrl: Option[String] = doc.hcursor.get[String]("full_url").toOption$/;"	l
fullUrl	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val fullUrl = "https:\/\/google.com"$/;"	l
fullUrlHash	src/main/scala/irobo/api/service/UrlService.scala	/^		val fullUrlHash   = getFullUrlHash(prettyFullUrl)$/;"	l
get	src/main/scala/irobo/api/model/dao/RowDao.scala	/^  def get(sql: String)(implicit ec: ExecutionContext): Future[Option[T]] = {$/;"	m
getCriticalLogger	src/main/scala/irobo/api/Logger.scala	/^  def getCriticalLogger = org.slf4j.LoggerFactory.getLogger("critical")$/;"	m
getFirstMondayDate	src/main/scala/irobo/api/service/Algorithm.scala	/^	def getFirstMondayDate(month : Int): LocalDate = {$/;"	m
getFullUrl	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^  def getFullUrl(): Endpoint[FullUrl] = {$/;"	m
getFullUrl	src/main/scala/irobo/api/service/UrlService.scala	/^  def getFullUrl(shortUrl: String): Future[Option[String]] = {$/;"	m
getFullUrlHash	src/main/scala/irobo/api/service/UrlService.scala	/^	private[service] def getFullUrlHash(fullUrl: String): String = $/;"	m
getInstance	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  def getInstance(row: RowData): Url = {$/;"	m
getInstance	src/main/scala/irobo/api/model/dao/RowDao.scala	/^  def getInstance(row: RowData): T $/;"	m
getInstance	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  def getInstance(row: RowData): Url = {$/;"	m
getLogger	src/main/scala/irobo/api/Logger.scala	/^  def getLogger(clazz: Class[_]) = LoggerFactory.getLogger(clazz)$/;"	m
getShortUrl	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^  def getShortUrl(): Endpoint[ShortUrl] = {$/;"	m
getShortUrl	src/main/scala/irobo/api/service/UrlService.scala	/^	def getShortUrl(fullUrl: String): Future[Option[String]] = {$/;"	m
getUrl	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  def getUrl(fullUrlHash: String) : Future[Option[Url]] = {$/;"	m
getUrl	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  def getUrl(fullUrlHash: String) : Future[Option[Url]] = {$/;"	m
getUrlById	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  def getUrlById(id: Long) : Future[Option[Url]] = {$/;"	m
getUrlById	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  def getUrlById(id: Long) : Future[Option[Url]] = {$/;"	m
hosts	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val hosts = InetAddress.getAllByName(host)$/;"	l
id	src/main/scala/irobo/api/service/UrlService.scala	/^    val id = toBase10(parseShortUrl(shortUrl))$/;"	l
input	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^    val input = Array($/;"	l
input	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^    val input = Array($/;"	l
insert	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insert() = {$/;"	m
insertAccount	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertAccount() = {$/;"	m
insertBM	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertBM() = {$/;"	m
insertBranch	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertBranch()       = pool.sendQuery("""INSERT INTO branch (branch_id, company_id, branch_name) VALUES (1, 1, "서울"), (2, 2, "서울"), (3, 3, "서울")""")$/;"	m
insertCompany	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertCompany()      = pool.sendQuery("""INSERT INTO company (company_id, company_name) VALUES (1, "동부"), (2, "대신"), (3, "대우")""")$/;"	m
insertCustomer	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertCustomer() ={$/;"	m
insertFullUrlHash	src/main/scala/irobo/api/service/UrlService.scala	/^	private[service] def insertFullUrlHash($/;"	m
insertFund	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertFund() = {$/;"	m
insertFundIO	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertFundIO() = {$/;"	m
insertFundProduct	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertFundProduct() = {$/;"	m
insertPB	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertPB() = {$/;"	m
insertStockType	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def insertStockType() = pool.sendQuery("""INSERT INTO stock_type (stock_type_id, `desc`) VALUES (1, "주식"), (2, "채권")""")$/;"	m
insertUrl	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  def insertUrl(url: Url): Future[Long] = {$/;"	m
insertUrl	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  def insertUrl(url: Url): Future[Long] = {$/;"	m
insertUrls	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^      def insertUrls() = {$/;"	m
irobo.api	src/main/scala/irobo/api/Format.scala	/^package irobo.api$/;"	p
irobo.api	src/main/scala/irobo/api/JsonDecoder.scala	/^package irobo.api$/;"	p
irobo.api	src/main/scala/irobo/api/JsonEncoder.scala	/^package irobo.api$/;"	p
irobo.api	src/main/scala/irobo/api/Logger.scala	/^package irobo.api$/;"	p
irobo.api	src/main/scala/irobo/api/Server.scala	/^package irobo.api$/;"	p
irobo.api	src/main/scala/irobo/api/endpoint/Package.scala	/^package irobo.api$/;"	p
irobo.api.dao	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^package irobo.api.dao$/;"	p
irobo.api.endpoint	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^package irobo.api.endpoint$/;"	p
irobo.api.model	src/main/scala/irobo/api/model/GlobalParams.scala	/^package irobo.api.model$/;"	p
irobo.api.model	src/main/scala/irobo/api/model/ShortUrl.scala	/^package irobo.api.model$/;"	p
irobo.api.model	src/main/scala/irobo/api/model/Url.scala	/^package irobo.api.model$/;"	p
irobo.api.model.dao	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^package irobo.api.model.dao$/;"	p
irobo.api.model.dao	src/main/scala/irobo/api/model/dao/RowDao.scala	/^package irobo.api.model.dao$/;"	p
irobo.api.model.dao	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^package irobo.api.model.dao$/;"	p
irobo.api.model.dao	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^package irobo.api.model.dao$/;"	p
irobo.api.service	src/main/scala/irobo/api/service/Algorithm.scala	/^package irobo.api.service$/;"	p
irobo.api.service	src/main/scala/irobo/api/service/FutureConvert.scala	/^package irobo.api.service$/;"	p
irobo.api.service	src/main/scala/irobo/api/service/HttpInvoker.scala	/^package irobo.api.service$/;"	p
irobo.api.service	src/main/scala/irobo/api/service/UrlService.scala	/^package irobo.api.service$/;"	p
irobo.api.service	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^package irobo.api.service$/;"	p
irobo.api.service	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^package irobo.api.service$/;"	p
jan	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^        val jan = algorithm.getFirstMondayDate(1)$/;"	l
list	src/main/scala/irobo/api/model/dao/RowDao.scala	/^  def list(sql: String)(implicit ec: ExecutionContext): Future[Seq[T]] = {$/;"	m
logger	src/main/scala/irobo/api/Logger.scala	/^  final val logger = LoggerFactory.getLogger(getClass)$/;"	l
logger	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private val logger   = Logger.getLogger(this.getClass)$/;"	l
loop	src/main/scala/irobo/api/service/UrlService.scala	/^    def loop($/;"	m
mondayDate	src/main/scala/irobo/api/service/Algorithm.scala	/^			val mondayDate = weekFromFirstDayOfMonth.withDayOfWeek(DateTimeConstants.MONDAY)$/;"	l
monixScheduler	src/main/scala/irobo/api/Server.scala	/^  val monixScheduler              = $/;"	l
monixScheduler	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^      val monixScheduler = monix.execution.Scheduler.Implicits.global$/;"	l
mySqlConfig	src/main/scala/irobo/api/Server.scala	/^    val mySqlConfig = config.getConfig("mySqlConfig")$/;"	l
mySqlConfig	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val mySqlConfig       = config.getConfig("mySqlConfig")$/;"	l
newDigits	src/main/scala/irobo/api/service/UrlService.scala	/^        val newDigits: Seq[Int] = digits :+ (num % 62).toInt$/;"	l
newNum	src/main/scala/irobo/api/service/UrlService.scala	/^        val newNum: Long        = num \/ 62$/;"	l
object	src/main/scala/irobo/api/endpoint/Package.scala	/^package object endpoint {$/;"	p
outgoing	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val outgoing = new SpoolSource[Change[SocketAddress]]$/;"	l
output	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^      val output = $/;"	l
output	src/main/scala/irobo/api/service/UrlService.scala	/^        val output = digits.map { digit => charset.charAt(digit) }.mkString$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.getFullUrlHash("test")$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.parseShortUrl(url)$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.prettifyFullUrl(fullUrl)$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.toBase10("cb")$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.toBase62(Some(213890L))$/;"	l
output	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val output = urlService.wrapShortUrl(shortUrl)$/;"	l
p	src/main/scala/irobo/api/endpoint/Package.scala	/^      val p: SPromise[A] = SPromise()$/;"	l
p	src/main/scala/irobo/api/endpoint/Package.scala	/^      val p: TPromise[A] = new TPromise[A]$/;"	l
p	src/main/scala/irobo/api/service/FutureConvert.scala	/^      val p: SPromise[A] = SPromise()$/;"	l
p	src/main/scala/irobo/api/service/FutureConvert.scala	/^      val p: TPromise[A] = new TPromise[A]$/;"	l
parseShortUrl	src/main/scala/irobo/api/service/UrlService.scala	/^  private[service] def parseShortUrl(url: String): String = url.split("my.kr\/").last$/;"	m
pattern	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^			val pattern: Regex = """^((https?|ftp|smtp):\\\/\\\/)?(www.)?[a-z0-9]+\\.[a-z]+(\\\/[a-zA-Z0-9#]+\\\/?)*$""".r$/;"	l
pool	src/main/scala/irobo/api/Server.scala	/^  val pool = {$/;"	l
pool	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  val pool = {$/;"	l
pool	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^      val pool = TestDatabase.pool$/;"	l
pool	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^      implicit val pool = TestDatabase.pool$/;"	l
poolConfig	src/main/scala/irobo/api/Server.scala	/^    val poolConfig = PoolConfiguration($/;"	l
port	src/main/scala/irobo/api/Server.scala	/^  val port   = config.getInt("port")$/;"	l
port	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val port              = config.getInt("port")$/;"	l
prettifyFullUrl	src/main/scala/irobo/api/service/UrlService.scala	/^	private[service] def prettifyFullUrl(fullUrl: String) = $/;"	m
prettyFullUrl	src/main/scala/irobo/api/service/UrlService.scala	/^		val prettyFullUrl = prettifyFullUrl(fullUrl)$/;"	l
protocol	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private val protocol = if(port == 443) "https" else "http"$/;"	l
queryParamsStr	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val queryParamsStr     = s"""${queryParams.map(v => s"${v._1}=${URLEncoder.encode(v._2, "UTF-8")}").mkString("&")}"""$/;"	l
removed	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val removed = h.current.filter(!updated.contains(_))$/;"	l
request	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val request            = RequestBuilder()$/;"	l
request	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val request = RequestBuilder()$/;"	l
res	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val res = hosts.filter(a => a.isInstanceOf[Inet4Address]).map(a => new InetSocketAddress(a.getHostAddress, port))$/;"	l
resolve	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def resolve(host: String, port: Int): Seq[SocketAddress] = {$/;"	m
resolvers	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private val resolvers = new java.util.concurrent.ConcurrentHashMap[String, HostToResolve]()$/;"	l
routes	src/main/scala/irobo/api/Server.scala	/^  val routes = $/;"	l
run	src/main/scala/irobo/api/Server.scala	/^    def run() {$/;"	m
sendGet	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def sendGet(uri: String, queryParams: Map[String, String] = Map.empty[String, String]): Future[Response] = {$/;"	m
sendPostJson	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def sendPostJson(uri: String, json: String): Future[Response] = {$/;"	m
server	src/main/scala/irobo/api/Server.scala	/^  val server = Http.serve(":" + port, routes.toService)$/;"	l
shortUrl	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^			val shortUrl: Option[String] = doc.hcursor.get[String]("short_url").toOption$/;"	l
shortUrl	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val shortUrl = "a"$/;"	l
shutDownHook	src/main/scala/irobo/api/Server.scala	/^  val shutDownHook = new Runnable {$/;"	l
snap	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  def snap: (Seq[SocketAddress], util.Future[Spool[Change[SocketAddress]]]) = {$/;"	m
sql	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^        val sql = $/;"	l
sql	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^    val sql = $/;"	l
sql	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^        val sql = $/;"	l
sql	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^    val sql = $/;"	l
sql	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val sql = $/;"	l
sql	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^        val sql = $/;"	l
start	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private def start() {$/;"	m
t	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val t = new Thread("DNS Resolver for HTTPInvoker") {$/;"	l
tables	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^    val tables = Seq("account", "bm", "branch", "company", "customer", "fund", "fund_io", "fund_product", "private_banker")$/;"	l
tables	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^        val tables = Seq("urls")$/;"	l
tables	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val tables = Seq("urls")$/;"	l
tests	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^  val tests = this {$/;"	l
tests	src/test/scala/irobo/api/service/AlgorithmTest.scala	/^  val tests = this {$/;"	l
tests	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^  val tests = this {$/;"	l
toBase10	src/main/scala/irobo/api/service/UrlService.scala	/^  private[service] def toBase10(str: String): Int = {$/;"	m
toBase62	src/main/scala/irobo/api/service/UrlService.scala	/^  private[service] def toBase62(num: Option[Long]): Option[String] = {$/;"	m
transactionExecutionContext	src/main/scala/irobo/api/Server.scala	/^  val transactionExecutionContext = $/;"	l
truncate	src/test/scala/irobo/api/model/dao/TestDatabase.scala	/^  def truncate() = {$/;"	m
truncate	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^      def truncate() = {$/;"	m
truncate	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^      def truncate() = {$/;"	m
tryStringToInt	src/main/scala/irobo/api/Format.scala	/^  def tryStringToInt(a: String): Option[Int] =$/;"	m
update	src/main/scala/irobo/api/service/HttpInvoker.scala	/^  private def update(h: HostToResolve) {$/;"	m
updateShortUrl	src/main/scala/irobo/api/model/dao/GlobalParamsDao.scala	/^  def updateShortUrl($/;"	m
updateShortUrl	src/main/scala/irobo/api/model/dao/UrlDao.scala	/^  def updateShortUrl($/;"	m
updated	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val updated = resolve(h.host, h.port)$/;"	l
uriWithQueryParams	src/main/scala/irobo/api/service/HttpInvoker.scala	/^    val uriWithQueryParams = s"""$uri?$queryParamsStr"""$/;"	l
url	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^        val url = Url($/;"	l
url	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^        val url = "my.kr\/test"$/;"	l
urlDao	src/main/scala/irobo/api/Server.scala	/^  val urlDao = new UrlDao(pool)$/;"	l
urlDao	src/test/scala/irobo/api/model/dao/UrlDaoTest.scala	/^      val urlDao = new UrlDao(pool)$/;"	l
urlDao	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^      val urlDao     = new UrlDao(pool)$/;"	l
urlEndPoint	src/main/scala/irobo/api/Server.scala	/^  val urlEndPoint = new UrlEndPoint(urlService)$/;"	l
urlService	src/main/scala/irobo/api/Server.scala	/^  val urlService = new UrlService(urlDao)$/;"	l
urlService	src/test/scala/irobo/api/service/UrlServiceTest.scala	/^      val urlService = new UrlService(urlDao)$/;"	l
urlValue	src/main/scala/irobo/api/service/UrlService.scala	/^		val urlValue = Url($/;"	l
validatedUrl	src/main/scala/irobo/api/endpoint/UrlEndPoint.scala	/^			val validatedUrl = fullUrl.flatMap { url => pattern.findFirstIn(url) }$/;"	l
weekFromFirstDayOfMonth	src/main/scala/irobo/api/service/Algorithm.scala	/^			val weekFromFirstDayOfMonth = firstDayOfMonth.plusDays(7) $/;"	l
wrapShortUrl	src/main/scala/irobo/api/service/UrlService.scala	/^  private[service] def wrapShortUrl(shortUrl: String) = s"my.kr\/$shortUrl"$/;"	m
